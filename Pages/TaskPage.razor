@page "/taskList/{GroupId}"
@inject ITaskService TaskService

<h3>List of Tasks</h3>

@if (tasks != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>State</th>
                <th>Creation Date</th>
                <th>Groups</th/>    
                <th>Due Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.State</td>
                    <td>@task.CreatedAt</td>
                    <td>@task.WorkersGroups</td>
                    <td>@task.FinishDate?.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn" @onclick="GiveTask">Give Task</button>
}
else
{
    <p>Loading tasks...</p>
}

<style>
    .table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    th {
        background-color: #f2f2f2;
    }

    tbody tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    .btn {
        margin-top: 10px;
        padding: 8px 16px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
</style>

@code {
    public List<Data.Models.Task> tasks { get; set; }
    [Parameter]
    public string GroupId { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        tasks = await TaskService.GetTasks(GroupId);
    }

    private void GiveTask()
    {
        // TODO: Implement the logic to give a task
        // You can navigate to a new page or show a modal dialog to give a task to someone.
        // This method will be called when the "Give Task" button is clicked.
    }
}
