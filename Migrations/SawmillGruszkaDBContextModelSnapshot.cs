// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using blazor_19c.Data.Models;

#nullable disable

namespace blazor_19c.Migrations
{
    [DbContext(typeof(SawmillGruszkaDBContext))]
    partial class SawmillGruszkaDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MaterialMaterialsDelivery", b =>
                {
                    b.Property<string>("MaterialsDeliveriesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MaterialsDeliveriesId", "MaterialsId");

                    b.HasIndex("MaterialsId");

                    b.ToTable("MaterialMaterialsDelivery");
                });

            modelBuilder.Entity("MaterialTask", b =>
                {
                    b.Property<string>("MaterialsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TasksId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MaterialsId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("MaterialTask");
                });

            modelBuilder.Entity("SawmillWorkerWorkersGroup", b =>
                {
                    b.Property<string>("SawmillWorkersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkersGroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SawmillWorkersId", "WorkersGroupsId");

                    b.HasIndex("WorkersGroupsId");

                    b.ToTable("SawmillWorkerWorkersGroup");
                });

            modelBuilder.Entity("TaskTaskReport", b =>
                {
                    b.Property<string>("ReportsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TasksId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReportsId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("TaskTaskReport");
                });

            modelBuilder.Entity("TaskWorkOnOrder", b =>
                {
                    b.Property<string>("TasksId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkOnOrdersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TasksId", "WorkOnOrdersId");

                    b.HasIndex("WorkOnOrdersId");

                    b.ToTable("TaskWorkOnOrder");
                });

            modelBuilder.Entity("TaskWorkersGroup", b =>
                {
                    b.Property<string>("TasksId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkersGroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TasksId", "WorkersGroupsId");

                    b.HasIndex("WorkersGroupsId");

                    b.ToTable("TaskWorkersGroup");
                });

            modelBuilder.Entity("blazor_19c.Data.Models.Material", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PricePerKilo")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("blazor_19c.Data.Models.MaterialsDelivery", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeliveryCompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MaterialsDelivery");
                });

            modelBuilder.Entity("blazor_19c.Data.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("OrderPrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("blazor_19c.Data.Models.Person", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("PersonType").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("blazor_19c.Data.Models.Task", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Task");

                    b.HasData(
                        new
                        {
                            Id = "20b8164c-7937-4079-9bdb-a077ac361da3",
                            CreatedAt = new DateTime(2023, 6, 19, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(378),
                            FinishDate = new DateTime(2023, 6, 20, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(380),
                            State = "New"
                        },
                        new
                        {
                            Id = "92d52d17-3da4-45e3-bc8c-00c5f67d683d",
                            CreatedAt = new DateTime(2023, 6, 21, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(388),
                            FinishDate = new DateTime(2023, 6, 22, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(389),
                            State = "New"
                        },
                        new
                        {
                            Id = "ceacbcfc-1122-4099-a451-374d38d9d8cf",
                            CreatedAt = new DateTime(2023, 6, 23, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(393),
                            FinishDate = new DateTime(2023, 6, 24, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(396),
                            State = "New"
                        },
                        new
                        {
                            Id = "db3be581-b0c8-4e63-b1e1-f870d08ccbad",
                            CreatedAt = new DateTime(2023, 6, 25, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(428),
                            FinishDate = new DateTime(2023, 6, 26, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(430),
                            State = "New"
                        },
                        new
                        {
                            Id = "53ca0472-0290-48ea-a831-66baf97c62f8",
                            CreatedAt = new DateTime(2023, 6, 27, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(435),
                            FinishDate = new DateTime(2023, 6, 28, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(436),
                            State = "New"
                        });
                });

            modelBuilder.Entity("blazor_19c.Data.Models.TaskReport", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShiftSupervisorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShiftSupervisorId");

                    b.ToTable("TaskReport");
                });

            modelBuilder.Entity("blazor_19c.Data.Models.WorkOnOrder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("WorkEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WorkStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("WorkOnOrder");
                });

            modelBuilder.Entity("blazor_19c.Data.Models.WorkersGroup", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkersGroup");

                    b.HasData(
                        new
                        {
                            Id = "75a8805b-90df-46c6-a1d4-6286604f298e",
                            Specialization = "Sawing"
                        },
                        new
                        {
                            Id = "3246c944-7793-40e9-b365-146b97910944",
                            Specialization = "Drying"
                        },
                        new
                        {
                            Id = "05f953cb-11fe-4779-a97f-ebcb815272a9",
                            Specialization = "Planing"
                        },
                        new
                        {
                            Id = "2c1fa606-5cbd-4404-ad1b-150c0b6133f5",
                            Specialization = "Packing"
                        },
                        new
                        {
                            Id = "a42d62c6-24ed-4465-91d6-deb09862d464",
                            Specialization = "Loading"
                        },
                        new
                        {
                            Id = "7492b2c0-33d1-479c-8a72-afbda8c033e1",
                            Specialization = "Wood"
                        },
                        new
                        {
                            Id = "cf5a7aad-9e98-4c85-94d0-2f3ef6aa3541",
                            Specialization = "Metal"
                        });
                });

            modelBuilder.Entity("blazor_19c.Data.Models.Client", b =>
                {
                    b.HasBaseType("blazor_19c.Data.Models.Person");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("blazor_19c.Data.Models.SawmillWorker", b =>
                {
                    b.HasBaseType("blazor_19c.Data.Models.Person");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.Property<int>("Seniority")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("SawmillWorker");

                    b.HasData(
                        new
                        {
                            Id = "7d790367-185b-4d32-ad8c-955a50c51f35",
                            Birthdate = new DateTime(2003, 6, 19, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(246),
                            FirstName = "Jan",
                            LastName = "Kowalski",
                            Pesel = "12345678901",
                            Salary = 1000f,
                            Seniority = 10
                        },
                        new
                        {
                            Id = "d3bc6c5f-b21f-479a-af92-ee2d9f834343",
                            Birthdate = new DateTime(1998, 6, 19, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(287),
                            FirstName = "Anna",
                            LastName = "Nowak",
                            Pesel = "23456789012",
                            Salary = 1200f,
                            Seniority = 5
                        },
                        new
                        {
                            Id = "00a62e0a-b5da-4a14-8d12-8815986725fb",
                            Birthdate = new DateTime(1993, 6, 19, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(291),
                            FirstName = "John",
                            LastName = "Smith",
                            Pesel = "34567890123",
                            Salary = 1100f,
                            Seniority = 8
                        },
                        new
                        {
                            Id = "607138f0-d25c-41d9-abc1-a3df9d66e15a",
                            Birthdate = new DateTime(1995, 6, 19, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(295),
                            FirstName = "Maria",
                            LastName = "Garcia",
                            Pesel = "45678901234",
                            Salary = 1300f,
                            Seniority = 3
                        },
                        new
                        {
                            Id = "e78ab901-33eb-4746-8a93-09abd164d2bd",
                            Birthdate = new DateTime(1991, 6, 19, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(299),
                            FirstName = "Li",
                            LastName = "Chen",
                            Pesel = "56789012345",
                            Salary = 1050f,
                            Seniority = 6
                        },
                        new
                        {
                            Id = "676f66a0-362c-47a2-9f6e-4812283ef9e8",
                            Birthdate = new DateTime(1999, 6, 19, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(315),
                            FirstName = "Hans",
                            LastName = "Müller",
                            Pesel = "67890123456",
                            Salary = 1150f,
                            Seniority = 9
                        },
                        new
                        {
                            Id = "a50071b1-4645-4e34-9ae2-10ec89b27bd1",
                            Birthdate = new DateTime(1996, 6, 19, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(318),
                            FirstName = "Carlos",
                            LastName = "Ramos",
                            Pesel = "78901234567",
                            Salary = 1250f,
                            Seniority = 4
                        },
                        new
                        {
                            Id = "e2fbc513-f341-4b39-9c6b-fc266cadfe03",
                            Birthdate = new DateTime(1994, 6, 19, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(323),
                            FirstName = "Akiko",
                            LastName = "Yamamoto",
                            Pesel = "89012345678",
                            Salary = 1350f,
                            Seniority = 7
                        },
                        new
                        {
                            Id = "74f4b10c-61a8-488e-af31-c98c4d785df7",
                            Birthdate = new DateTime(1997, 6, 19, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(327),
                            FirstName = "Élise",
                            LastName = "Dubois",
                            Pesel = "90123456789",
                            Salary = 1400f,
                            Seniority = 2
                        },
                        new
                        {
                            Id = "3c54bbcf-2738-4beb-a1ed-32ef1ff96c61",
                            Birthdate = new DateTime(1992, 6, 19, 10, 24, 29, 928, DateTimeKind.Local).AddTicks(332),
                            FirstName = "Ivan",
                            LastName = "Petrov",
                            Pesel = "01234567890",
                            Salary = 1020f,
                            Seniority = 5
                        });
                });

            modelBuilder.Entity("blazor_19c.Data.Models.ShiftSupervisor", b =>
                {
                    b.HasBaseType("blazor_19c.Data.Models.SawmillWorker");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Person", t =>
                        {
                            t.Property("PhoneNumber")
                                .HasColumnName("ShiftSupervisor_PhoneNumber");
                        });

                    b.HasDiscriminator().HasValue("ShiftSupervisor");
                });

            modelBuilder.Entity("MaterialMaterialsDelivery", b =>
                {
                    b.HasOne("blazor_19c.Data.Models.MaterialsDelivery", null)
                        .WithMany()
                        .HasForeignKey("MaterialsDeliveriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blazor_19c.Data.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialTask", b =>
                {
                    b.HasOne("blazor_19c.Data.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blazor_19c.Data.Models.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SawmillWorkerWorkersGroup", b =>
                {
                    b.HasOne("blazor_19c.Data.Models.SawmillWorker", null)
                        .WithMany()
                        .HasForeignKey("SawmillWorkersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blazor_19c.Data.Models.WorkersGroup", null)
                        .WithMany()
                        .HasForeignKey("WorkersGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskTaskReport", b =>
                {
                    b.HasOne("blazor_19c.Data.Models.TaskReport", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blazor_19c.Data.Models.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskWorkOnOrder", b =>
                {
                    b.HasOne("blazor_19c.Data.Models.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blazor_19c.Data.Models.WorkOnOrder", null)
                        .WithMany()
                        .HasForeignKey("WorkOnOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskWorkersGroup", b =>
                {
                    b.HasOne("blazor_19c.Data.Models.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blazor_19c.Data.Models.WorkersGroup", null)
                        .WithMany()
                        .HasForeignKey("WorkersGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("blazor_19c.Data.Models.Order", b =>
                {
                    b.HasOne("blazor_19c.Data.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("blazor_19c.Data.Models.TaskReport", b =>
                {
                    b.HasOne("blazor_19c.Data.Models.ShiftSupervisor", "ShiftSupervisor")
                        .WithMany("TaskReports")
                        .HasForeignKey("ShiftSupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftSupervisor");
                });

            modelBuilder.Entity("blazor_19c.Data.Models.WorkOnOrder", b =>
                {
                    b.HasOne("blazor_19c.Data.Models.Order", "Order")
                        .WithMany("WorkOnOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("blazor_19c.Data.Models.Order", b =>
                {
                    b.Navigation("WorkOnOrders");
                });

            modelBuilder.Entity("blazor_19c.Data.Models.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("blazor_19c.Data.Models.ShiftSupervisor", b =>
                {
                    b.Navigation("TaskReports");
                });
#pragma warning restore 612, 618
        }
    }
}
